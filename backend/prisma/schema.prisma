generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String      @id @default(uuid())
  name                        String
  email                       String      @unique
  password                    String?
  googleId                    String?
  facebookId                  String?
  ethnicity                   String?
  countryOfOrigin             String?
  dateOfBirth                 String?
  gender                      Gender?     @default(Male)
  role                        UserRole    @default(REGULAR)
  isProfileCompleted          Boolean     @default(false)
  isEmailVerified             Boolean     @default(false)
  isBanned                    Boolean     @default(false)
  canBypassPreferences        Boolean     @default(false)
  verificationToken           String?
  verificationTokenExpiration DateTime?
  resetPasswordToken          String?
  resetPasswordExpiration     DateTime?
  numLimitPhotos              Int         @default(20)
  activeMatch                 Match?      @relation(name: "activeMatch")
  pictures                    Picture[]
  votes                       Vote[]      @relation(name: "voter")
  reports                     Report[]
  preference                  Preference?
  purchase                    Purchase?
  createdAt                   DateTime    @default(now())
  updatedAt                   DateTime    @updatedAt
}

enum UserRole {
  ADMIN
  REGULAR
}

model Preference {
  id             String   @id @default(uuid())
  contentMinAge  Int      @default(18)
  contentMaxAge  Int?
  contentGender  Gender?
  exposureMinAge Int      @default(18)
  exposureMaxAge Int?
  exposureGender Gender?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String   @unique
}

enum Gender {
  Male
  Female
}

model Purchase {
  id                     String   @id @default(uuid())
  hasIncreasedPhotoLimit Boolean  @default(false)
  hasUnlimitedVotes      Boolean  @default(false)
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  userId                 String   @unique
}

model Picture {
  id                         String   @id @default(uuid())
  filepath                   String
  rating                     Float    @default(0)
  ratingDeviation            Float    @default(0)
  volatility                 Float    @default(0)
  numVotes                   Int      @default(0)
  freeRating                 Float    @default(0)
  maxFreeVotes               Int      @default(30)
  hasPurchasedUnlimitedVotes Boolean  @default(false)
  isGlobal                   Boolean  @default(true)
  user                       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                     String
  matches                    Match[]
  votesWinner                Vote[]   @relation(name: "winnerPicture")
  reports                    Report[]
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
}

model Vote {
  id              String   @id @default(uuid())
  winnerPicture   Picture? @relation(fields: [winnerPictureId], references: [id], onDelete: Cascade, name: "winnerPicture")
  winnerPictureId String?
  voter           User     @relation(fields: [voterId], references: [id], onDelete: Cascade, name: "voter")
  voterId         String
  match           Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId         String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Match {
  id           String    @id @default(uuid())
  activeUser   User?     @relation(name: "activeMatch", fields: [activeUserId], references: [id], onDelete: Cascade)
  activeUserId String?   @unique
  pictures     Picture[]
  vote         Vote?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Report {
  id              String   @id @default(uuid())
  picture         Picture  @relation(fields: [pictureId], references: [id], onDelete: Cascade)
  userReporting   User     @relation(fields: [userReportingId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  pictureId       String
  userReportingId String
}

model BannedUser {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
