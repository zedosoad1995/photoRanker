generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  password        String
  ethnicity       String
  countryOfOrigin String
  dateOfBirth     String
  role            UserRole  @default(REGULAR)
  gender          Gender    @default(MALE)
  activeMatch     Match?    @relation(name: "activeMatch", fields: [activeMatchId], references: [id])
  activeMatchId   String?   @unique
  pictures        Picture[]
  votes           Vote[]    @relation(name: "voter")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum UserRole {
  ADMIN
  REGULAR
}

enum Gender {
  MALE
  FEMALE
}

model Picture {
  id          String   @id @default(uuid())
  filepath    String
  elo         Float    @default(0)
  numVotes    Int      @default(0)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  matches     Match[]
  votesWinner Vote[]   @relation(name: "winnerPicture")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Vote {
  id              String   @id @default(uuid())
  winnerPicture   Picture  @relation(fields: [winnerPictureId], references: [id], onDelete: Cascade, name: "winnerPicture")
  winnerPictureId String
  voter           User     @relation(fields: [voterId], references: [id], onDelete: Cascade, name: "voter")
  voterId         String
  match           Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId         String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Match {
  id         String    @id @default(uuid())
  activeUser User?     @relation(name: "activeMatch")
  pictures   Picture[]
  vote       Vote?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
